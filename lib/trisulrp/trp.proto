// Trisul Remote Protocol (TRP) definition
// Based on Google Protocol Buffers
// (c) 2012-16, Unleash Networks (http://www.unleashnetworks.com)
// $Rev: 6946 $

option optimize_for = LITE_RUNTIME; 


package TRP;

//
// Basic structures
//
message Timestamp  {
  required int64            tv_sec=1;
  optional int64            tv_usec=2 [default=0];
}

message TimeInterval  {
    required Timestamp      from=1;
    required Timestamp      to=2;
}

message StatsTuple {
    required Timestamp      ts=1; 
    required int64          val=2; 
}

message MeterValues {
    required int32          meter=1;
    repeated StatsTuple     values=2;
	optional int64			total=3;
	optional int64			seconds=4;
}

message MeterInfo {

	// from TrisulAPI 
	enum MeterType
	{
		VT_INVALID=0;
		VT_RATE_COUNTER_WITH_SLIDING_WINDOW=1;// this for top-N type counters
		VT_COUNTER=2;                         // basic counter, stores val in the raw
		VT_COUNTER_WITH_SLIDING_WINDOW=3;     // use this for top-N type counters
		VT_RATE_COUNTER=4;                    // rate counter stores val/sec
		VT_GAUGE=5;                           // basic gauge
		VT_GAUGE_MIN_MAX_AVG=6;               // gauge with 3 additional min/avg/max cols (auto)
		VT_AUTO=7;                            // automatic (eg, min/max/avg/stddev/)
		VT_RUNNING_COUNTER=8;                 // running counter, no delta calc 
        VT_AVERAGE=9;                 		  // average of samples, total/sampl uses 32bt|32bit
	}


    required int32          id=1;
    required MeterType      type=2;
    required int32	     	topcount=3;
	required string			name=4;
	optional string			description=5;
	optional string			units=6;
}

message KeyStats {
    required string         counter_group=2;
    required KeyT     key=3;
    repeated MeterValues    meters=4;
}


//
// Top level objects are named ObjT 
//	 eg KeyT - Key Type, SessionT - Session Type etc.
//
message KeyT {
    optional string         key=1;
    optional string         readable=2;
    optional string         label=3;
    optional string         description=4;
	optional int64			metric=5;
}


message CounterGroupT {
    required string         guid=1;
    required string         name=2;
    optional int64          bucket_size=3;
    optional TimeInterval   time_interval=4;
    optional int64          topper_bucket_size=5;
	repeated MeterInfo		meters=6;
}

message SessionT  {
	optional string         session_key=1;
	required string         session_id=2;
	optional string         user_label=3;
	required TimeInterval   time_interval=4;
	optional int64          state=5;
	optional int64          az_bytes=6;
	optional int64          za_bytes=7;
	optional int64          az_packets=8;
	optional int64          za_packets=9;
	required KeyT     		key1A=10;
	required KeyT     		key2A=11;
	required KeyT     		key1Z=12;
	required KeyT     		key2Z=13;
	required KeyT     		protocol=14;
	optional KeyT     		nf_routerid=15;
	optional KeyT     		nf_ifindex_in=16;
	optional KeyT     		nf_ifindex_out=17;
	optional string		    tags=18;
	optional int64          az_payload=19;
	optional int64          za_payload=20;
	optional int64          setup_rtt=21;
	optional int64          retransmissions=22;
	optional int64		    tracker_statval=23;
}


////////////////////////////////////
// AlertT
message AlertT{
	optional int64          sensor_id=1;
	required Timestamp      time=2;
	required string 		alert_id=3;
	optional KeyT     source_ip=4;
	optional KeyT     source_port=5;
	optional KeyT     destination_ip=6;
	optional KeyT     destination_port=7;
	optional KeyT     sigid=8;
	optional KeyT     classification=9;
	optional KeyT     priority=10;
	optional Timestamp      dispatch_time=11;
	optional string         aux_message1=12;
	optional string         aux_message2=13;
	optional int64          occurrances=14[default=1];
	optional string         group_by_key=15;
}


////////////////////////////////////
// ResourceT
message ResourceT {
	required Timestamp      time=1;
	required string         resource_id=2;
	optional KeyT     source_ip=3;
	optional KeyT     source_port=4;
	optional KeyT     destination_ip=5;
	optional KeyT     destination_port=6;
    optional string         uri=7;
    optional string         userlabel=8;
}

////////////////////////////////////
// DocumentT
message DocumentT  {
	required string         dockey=1;
	optional string         fts_attributes=2;
	optional string         fullcontent=3;

    message Flow {
        required Timestamp  time=1;
        required string     key=2;
    }

    repeated Flow          flows=4;
}


//
// Enums
//
enum AuthLevel {
    ADMIN=1;
    BASIC_USER=2;
    FORENSIC_USER=3;
    BLOCKED_USER=4;
}

enum CompressionType {
    UNCOMPRESSED=1;
    GZIP=2;
}

enum  PcapFormat {
    LIBPCAP=1;
    UNSNIFF=2;
}

//
// Top level message is TRP::Message
//  - wraps the actual request or response 
// 
message Message {
    enum Command {  HELLO_REQUEST=1; 
                    HELLO_RESPONSE=2;
                    OK_RESPONSE=3;
                    ERROR_RESPONSE=5;
                    COUNTER_GROUP_TOPPER_REQUEST=6;
                    COUNTER_GROUP_TOPPER_RESPONSE=7;
                    COUNTER_ITEM_REQUEST=8;
                    COUNTER_ITEM_RESPONSE=9;
                    PCAP_REQUEST=14;
                    PCAP_RESPONSE=15;
                    SEARCH_KEYS_REQUEST=18;                   
                    SEARCH_KEYS_RESPONSE=19;                        
                    COUNTER_GROUP_INFO_REQUEST=20;              
                    COUNTER_GROUP_INFO_RESPONSE=21;             
                    SESSION_TRACKER_REQUEST=22;                     
                    SESSION_TRACKER_RESPONSE=23;                    
                    UPDATE_KEY_REQUEST=32;                            
                    UPDATE_KEY_RESPONSE=33;                           
                    QUERY_SESSIONS_REQUEST=34;                     
                    QUERY_SESSIONS_RESPONSE=35;
                    SERVER_STATS_REQUEST=38;                    
                    SERVER_STATS_RESPONSE=39;                              
                    QUERY_ALERTS_REQUEST=44;
                    QUERY_ALERTS_RESPONSE=45;
                    QUERY_RESOURCES_REQUEST=48;
                    QUERY_RESOURCES_RESPONSE=49;
					GREP_REQUEST=60;
					GREP_RESPONSE=61;
					KEYSPACE_REQUEST=70;
					KEYSPACE_RESPONSE=71;
					TOPPER_TREND_REQUEST=72;
					TOPPER_TREND_RESPONSE=73;
                    STAB_PUBSUB_CTL=80;
                    QUERY_FTS_REQUEST=90;
                    QUERY_FTS_RESPONSE=91;
                    TIMESLICES_REQUEST=92;
                    TIMESLICES_RESPONSE=93;
                    DELETE_ALERTS_REQUEST=94;
    }

    required Command    trp_command=1;
    optional HelloRequest hello_request=2;
    optional HelloResponse hello_response=3;
    optional OKResponse ok_response=4;
    optional ErrorResponse error_response=5;
    optional CounterGroupTopperRequest counter_group_topper_request=6;
    optional CounterGroupTopperResponse counter_group_topper_response=7;
    optional CounterItemRequest counter_item_request=8;
    optional CounterItemResponse counter_item_response=9;
    optional PcapRequest pcap_request=14;
    optional PcapResponse pcap_response=15;
    optional SearchKeysRequest search_keys_request=18;
    optional SearchKeysResponse search_keys_response=19;
    optional CounterGroupInfoRequest counter_group_info_request=20;
    optional CounterGroupInfoResponse counter_group_info_response=21;
    optional UpdateKeyRequest update_key_request=30;
    optional QuerySessionsRequest query_sessions_request=31;
    optional QuerySessionsResponse  query_sessions_response=32;
    optional SessionTrackerRequest session_tracker_request=33;
    optional SessionTrackerResponse session_tracker_response=34;
    optional ServerStatsRequest server_stats_request=37;
    optional ServerStatsResponse server_stats_response=38;
    optional QueryAlertsRequest query_alerts_request=43;
    optional QueryAlertsResponse  query_alerts_response=44;
    optional QueryResourcesRequest query_resources_request=47;
    optional QueryResourcesResponse  query_resources_response=48;
    optional GrepRequest  grep_request=51;
    optional GrepResponse  grep_response=52;
    optional KeySpaceRequest  keyspace_request=53;
    optional KeySpaceResponse  keyspace_response=54;
    optional TopperTrendRequest  topper_trend_request=55;
    optional TopperTrendResponse  topper_trend_response=56;
    optional SubscribeCtl  subscribe_ctl=59;
    optional QueryFTSRequest  query_fts_request=60;
    optional QueryFTSResponse  query_fts_response=61;
    optional TimeSlicesRequest  time_slices_request=62;
    optional TimeSlicesResponse  time_slices_response=63;
    optional DeleteAlertsRequest delete_alerts_request=64;
}


//////////////////////////////////////////////////////////////
// --------------- Messages Section -------------------------//
// TRP is a synchronous request response protocol            //
// Send a xyz_Request() and wait for xyz_Response            //
// All requests necessarily get a response                   //
// --------------- Messages Section -------------------------//
//////////////////////////////////////////////////////////////

///////////////////////////////
// Hello 
message HelloRequest{
  required string   station_id=1;
}       

message HelloResponse{
  required string       trisul_id=1;
  required string       trisul_description=2;
  required string       connection_id=3;
  required string       version_string=4;
  required Timestamp    connection_start_time=5;
  required Timestamp    connection_up_time=6;
  required AuthLevel    current_auth_level=7;   
}

///////////////////////////////
// Error 
message ErrorResponse{
   required int64       original_command=1;
   required int64       error_code=2;
   required string      error_message=3;
}

///////////////////////////////
// OK 
message OKResponse{
   required int64       original_command=1;
   optional string      message=2;
}


///////////////////////////////
// CounterItemRequest 
message CounterItemRequest{
    required string         counter_group=2;
    optional int64          meter=3;
    required KeyT     key=4;
    required TimeInterval   time_interval=5;
	optional int64			volumes_only=6 [default=0];
}

///////////////////////////////
// CounterItemResponse  
message CounterItemResponse{
    required KeyStats       stats=1;
}


///////////////////////////////
// CounterGroupTopperRequest 
message CounterGroupTopperRequest{
    required string         counter_group=2;
    optional int64          meter=3 [default=0];
    optional int64          maxitems=4 [default=100];
    optional TimeInterval   time_interval=5;
    optional Timestamp      time_instant=6;
    optional int64          flags=7;
    optional bool           resolve_keys=8 [default=true];
}

///////////////////////////////
// CounterGroupTopperResponse  
message  CounterGroupTopperResponse{
    required string         counter_group=2;
    required int64          meter=3;
	optional int64			sysgrouptotal=4;
    repeated KeyT     keys=6;
}


///////////////////////////////
// PcapReqiest
//  NOTE - only one of the various filters are supported
//  sending > 1 will result in error 
// 
message PcapRequest {
    optional int64              max_bytes=1[default=100000000]; // 100MB , can increase to 0.75 Filesystem freespace
    optional CompressionType    compress_type=2[default=UNCOMPRESSED];              
    optional string             save_file=3;
	required TimeInterval       time_interval=4;                   
	required string             filter_expression=5;
}

/////////////////////////////////////
// FileredDatagaramResponse
message PcapResponse  {
    optional PcapFormat     format=1[default=LIBPCAP];                                 
    optional CompressionType compress_type=2[default=UNCOMPRESSED];                   
    optional TimeInterval   time_interval=3;                
    optional int64          num_bytes=4;      
    optional string         sha1=5;
    optional bytes          contents=6;
	optional string			save_file=7;
}

///////////////////////////////////////
// SearchkeysRequest
message SearchKeysRequest{
    required string         counter_group=2;        
    optional int64          maxitems=3[default=100];
    optional string         pattern=4;        
    optional string         label=5;
    repeated string         keys=6;
    optional int64          offset=7[default=0];
    optional bool           get_totals=8[default=false];
} 

//////////////////////////////////////
// SearchKeysResponse
message SearchKeysResponse{
    required string         counter_group=2;        
    repeated KeyT     keys=3;
    optional int64          total_count=4;

} 

/////////////////////////////////////
/// CounterGroupInfoRequest
message CounterGroupInfoRequest{
    optional string        counter_group=2;
	optional bool		   get_meter_info=3[default=false];
}

///////////////////////////////////
/// CounterGroupInfoResponse
message CounterGroupInfoResponse{
    repeated CounterGroupT    group_details=2;
}

///////////////////////////////////
// QuerySessions - any of the fields can be filled
// 				   all the fields filled are treated as AND criteria 
message QuerySessionsRequest {
    optional string         session_group=2[default="{99A78737-4B41-4387-8F31-8077DB917336}"];
    optional TimeInterval   time_interval=3;
    optional string         key=4;
	optional KeyT		    source_ip=5;
	optional KeyT		    source_port=6;
	optional KeyT			dest_ip=7;
	optional KeyT			dest_port=8;
	optional KeyT			any_ip=9;
	optional KeyT			any_port=10;
	optional string 		ip_pair=11;
	optional KeyT			protocol=12;
	optional string			flowtag=13;
	optional KeyT			nf_routerid=14;
	optional KeyT			nf_ifindex_in=15;
	optional KeyT			nf_ifindex_out=16;
	optional string			subnet_24=17;
	optional string			subnet_16=18;
    optional int64          maxitems=19[default=100];
    optional int64          volume_filter=20[default=0];
	optional bool			resolve_keys=21[default=true];
	optional string			outputpath=22;
	repeated string			idlist=23;
}

/////////////////////////////////////
// QuerySessionsResponse 
message QuerySessionsResponse {
    required string         	session_group=2;
    repeated SessionT     sessions=3;
    optional string         	outputpath=4;
}

//////////////////////////////////////////////
/// UpdatekeysRequest
/// Response = OKResponse or ErrorResponse
message UpdateKeyRequest{
    required string         counter_group=2;
    repeated KeyT     keys=4;
}

/////////////////////////////////////
// SessionTrackerRequest
message SessionTrackerRequest {
    optional string         session_group=2[default="{99A78737-4B41-4387-8F31-8077DB917336}"];
    required int64          tracker_id=3 [default=1];
    optional int64          maxitems=4 [default=100];
    required TimeInterval   time_interval=5;
    optional bool           resolve_keys=6 [default=true];
}

///////////////////////////////////
// SessionTrackerResponse 
message SessionTrackerResponse{
    required string         session_group=2;
    repeated SessionT       sessions=3;
    optional int64          tracker_id=4;
}

//////////////////////////////////
// ServerStatsRequest
message ServerStatsRequest{
     required int64         param=1;
}

//////////////////////////////////
// ServerStatsResponse
message ServerStatsResponse{
    required string         instance_name=1;
    required int64          connections=2;
    required int64          uptime_seconds=3;
    required double         cpu_usage_percent_trisul=4;
    required double         cpu_usage_percent_total=5;
    required double         mem_usage_trisul=6;
    required double         mem_usage_total=7;
    required double         mem_total=8;
    required int64          size_total=9;
    required double         drop_percent_cap=11;
    required double         drop_percent_trisul=12;
    required TimeInterval   time_interval=13;
}
////////////////////////////////////
// QueryAlertsRequest 
message QueryAlertsRequest  {
    required string         alert_group=2;
    optional TimeInterval   time_interval=3;
    optional int64          maxitems=5 [default=100];
    optional KeyT      		source_ip=6;
    optional KeyT     		source_port=7;
    optional KeyT     		destination_ip=8;
    optional KeyT     		destination_port=9;
    optional KeyT     		sigid=10;
    optional KeyT     		classification=11;
    optional KeyT     		priority=12;
    optional string         aux_message1=13;
    optional string         aux_message2=14;
    optional string         group_by_fieldname=15;
	repeated string 		idlist=16;
	optional bool			resolve_keys=17[default=true];
    optional string         any_ip=18;
    optional string         any_port=19;
}

/////////////////////////////////////
// QueryAlertsResponse 
message QueryAlertsResponse {
    required string         alert_group=2;
    repeated AlertT   		alerts=3;
}
////////////////////////////////////
//  QueryResourcesRequest
message QueryResourcesRequest {
    required string         resource_group=2;
    optional TimeInterval   time_interval=3;
    optional int64          maxitems=4 [default=100];
    optional KeyT     		source_ip=5;
    optional KeyT     		source_port=6;
    optional KeyT     		destination_ip=7; 
    optional KeyT     		destination_port=8;
    optional string         uri_pattern=9;
    optional string         userlabel_pattern=10;
    repeated string         uri_list=11;			 // cant be combined with others 
    repeated string         regex_uri=12;            // cant be combined with others 
	repeated string    		idlist=13;				 // resource ID list 
	optional bool			resolve_keys=14 [default=true];
}

/////////////////////////////////////
// QueryResourceResponse  
message QueryResourcesResponse {
    required string        	resource_group=2;
    repeated ResourceT     	resources=3;
}


////////////////////////////////////
// GrepRequest
message GrepRequest {
    required TimeInterval   time_interval=2;
    optional int64          maxitems=3 [default=100];
    optional int64          flowcutoff_bytes=4;
    optional string         pattern_hex=5;
    optional string         pattern_text=6;
    optional string         pattern_file=7;
	repeated string         md5list=8;
}

/////////////////////////////////////
// GrepResponse  
message GrepResponse  {
    repeated SessionT       sessions=2;
    repeated string         hints=3;
}


////////////////////////////////////
// KeySpaceRequest
message KeySpaceRequest {
    required string         counter_group=2;
    required TimeInterval   time_interval=3;
    optional int64          maxitems=4 [default=100];

	message KeySpace {
		required string 	from=1;
		required string 	to=2;
	}

	repeated KeySpace       spaces=5;
}

/////////////////////////////////////
// KeySpaceResponse  
message KeySpaceResponse  {
    optional string         counter_group=2;
    repeated string         hits=3;
}

///////////////////////////////
// TopperTrendRequest 
message TopperTrendRequest {
    required string         counter_group=2;
    optional int64          meter=3 [default=0];
    optional int64          maxitems=4 [default=100];
    optional TimeInterval   time_interval=5;
}

///////////////////////////////
// TopperTrendResponse   
message  TopperTrendResponse {
    required string         counter_group=2;
    required int64          meter=3;
    repeated KeyStats       keytrends=4;
}



///////////////////////////////////
// Subscribe - add a subcription to the Real Time channel
message SubscribeCtl  {

	// from TrisulAPI 
	enum StabberType 
	{
		ST_COUNTER_ITEM=0;
		ST_ALERT=1;			
		ST_FLOW=2;         
		ST_TOPPER=3;     
	}

	enum CtlType
	{
		CT_SUBSCRIBE=0;
		CT_UNSUBSCRIBE=1;
	}

	required CtlType		ctl=2;
	required StabberType	type=3;
	optional string			guid=4;
	optional string			key=5;
	optional int64			meterid=6;
}



// FTS
//  query to return docs, docids, and flows based on keyword search
//

message QueryFTSRequest  {

    required TimeInterval       time_interval=2;
	required string			    fts_group=3;
    required string             keywords=4;
    optional int64              maxitems=5[default=100];
}


message QueryFTSResponse {

	required string			    fts_group=2;
    repeated DocumentT    		documents=3;   

}


// Timeslices
//

message TimeSlicesRequest  {
}
message TimeSlicesResponse  {
	repeated TimeInterval       slices=1;
}


// DeleteAlerts
//  - very limited exception to Trisul rule of not having delete options 
message DeleteAlertsRequest  {
    required string         alert_group=2;
    required TimeInterval   time_interval=3;
    optional KeyT     		source_ip=6;
    optional KeyT     		source_port=7;
    optional KeyT     		destination_ip=8;
    optional KeyT     		destination_port=9;
    optional KeyT     		sigid=10;
    optional KeyT     		classification=11;
    optional KeyT     		priority=12;
    optional KeyT     		any_ip=18;
    optional KeyT     		any_port=19;
} 

